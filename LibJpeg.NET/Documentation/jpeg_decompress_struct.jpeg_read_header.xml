<?xml version="1.0" encoding="UTF-8"?>
<xml>
  <file>
    <title>jpeg_read_header</title>
    <breadcumbs>
      <link file="BitMiracle_LibJpeg_Classic.xml">
        <text>BitMiracle.LibJpeg.Classic namespace</text>
      </link>
      <text> :: </text>
      <link file="jpeg_decompress_struct.xml">
        <text>jpeg_decompress_struct</text>
      </link>
    </breadcumbs>
    <descriptionarticle only="false">
      <text>Decompression startup: this will read the source datastream header markers, up to the beginning of the compressed data proper.</text> </descriptionarticle>
    <seealso>
      <ref caption="Decompression details" file="Classic\Decompression_details.xml" />
      <ref caption="Decompression parameter selection" file="Classic\Decompression_parameter_selection.xml" />
    </seealso>
    <signature>
      <function>
        <name>jpeg_read_header</name>
        <return type="ReadResult" file="ReadResult.xml">
          <text>If you pass </text> <i><text>require_image</text> </i><text> = true (normal case), you need not check for a </text> <b><text>JPEG_HEADER_TABLES_ONLY</text> </b><text> return code; an abbreviated file will cause an error exit. </text> <b><text>JPEG_SUSPENDED</text> </b><text> is only possible if you use a data source module that can give a suspension return.</text> <br /><br /><text>This routine will read as far as the first SOS marker (ie, actual start of compressed data), and will save all tables and parameters in the JPEG object. It will also initialize the decompression parameters to default values, and finally return </text> <b><text>JPEG_HEADER_OK</text> </b><text>. On return, the application may adjust the decompression parameters and then call </text> <link file="jpeg_start_decompress"><text>jpeg_start_decompress</text> </link><text>. (Or, if the application only wanted to determine the image parameters, the data need not be decompressed. In that case, call </text> <link file="jpeg_common_struct.jpeg_abort.xml"><text>jpeg_abort</text> </link><text> to release any temporary space.)</text> <br /><br /><text>If an abbreviated (tables only) datastream is presented, the routine will return </text> <b><text>JPEG_HEADER_TABLES_ONLY</text> </b><text> upon reaching EOI. The application may then re-use the JPEG object to read the abbreviated image datastream(s). It is unnecessary (but OK) to call </text> <link file="jpeg_abort"><text>jpeg_abort</text> </link><text> in this case. The </text> <b><text>JPEG_SUSPENDED</text> </b><text> return code only occurs if the data source module requests suspension of the decompressor. In this case the application should load more source data and then re-call </text> <link file="jpeg_decompress_struct.jpeg_read_header.xml"><text>jpeg_read_header</text> </link><text> to resume processing.</text> <br /><br /><text>If a non-suspending data source is used and </text> <i><text>require_image</text> </i><text> is true, then the return code need not be inspected since only </text> <b><text>JPEG_HEADER_OK</text> </b><text> is possible.</text> </return>
        <parameters>
          <parameter name="require_image" type="Boolean" />
        </parameters>
      </function>
    </signature>
    <remarks>
      <p>
        <text>Need only initialize JPEG object and supply a data source before calling.</text> </p>
      <p>
        <text>On return, the image dimensions and other info have been stored in the JPEG object. The application may wish to consult this information before selecting decompression parameters.</text> <br /><br /><text>This routine is now just a front end to </text> <link file="jpeg_decompress_struct.jpeg_consume_input.xml"><text>jpeg_consume_input</text> </link><text>, with some extra error checking.</text> </p>
    </remarks>
  </file>
</xml>