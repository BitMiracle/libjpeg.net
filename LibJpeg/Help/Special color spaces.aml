<?xml version="1.0" encoding="utf-8"?>
<topic id="c90654b9-f3f4-4319-80d1-979c73d84e76" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="Main">
      <content>
        <para>The JPEG standard itself is "color blind" and doesn't specify any 
        particular color space. It is customary to convert color data to a 
        luminance/chrominance color space before compressing, since this permits 
        greater compression. The existing de-facto JPEG file format standards 
        specify YCbCr or grayscale data (JFIF), or grayscale, RGB, YCbCr, CMYK, 
        or YCCK (Adobe). For special applications such as multispectral images, 
        other color spaces can be used, but it must be understood that such files 
        will be unportable.
        </para>
        
        <para>The JPEG library can handle the most common colorspace conversions 
        (namely RGB &lt;=&gt; YCbCr and CMYK &lt;=&gt; YCCK). It can also deal 
        with data of an unknown color space, passing it through without conversion. 
        If you deal extensively with an unusual color space, you can easily extend 
        the library to understand additional color spaces and perform appropriate 
        conversions.
        </para>
        
        <para>For compression, the source data's color space is specified by 
        property <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.In_color_space</codeEntityReference>. 
        This is transformed to the JPEG file's color space given by 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space</codeEntityReference>. 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults</codeEntityReference> 
        chooses a reasonable JPEG color space depending on 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.In_color_space</codeEntityReference>, 
        but you can override this by calling 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)</codeEntityReference>. 
        Of course you may select a supported transformation.
        </para>
        
        <para>The following transformations are currently supported:</para>
		<list class="bullet">
  			<listItem>RGB => YCbCr</listItem>
  			<listItem>RGB => GRAYSCALE</listItem>
  			<listItem>YCbCr => GRAYSCALE</listItem>
  			<listItem>CMYK => YCCK</listItem>
		</list>

        <para>plus the null transforms: GRAYSCALE => GRAYSCALE, RGB => RGB,
        YCbCr => YCbCr, CMYK => CMYK, YCCK => YCCK, and UNKNOWN => UNKNOWN.
        </para>
        
        <para>The de-facto file format standards (JFIF and Adobe) specify APPn 
        markers that indicate the color space of the JPEG file. It is important 
        to ensure that these are written correctly, or omitted if the JPEG file's 
        color space is not one of the ones supported by the de-facto standards. 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)</codeEntityReference>
        will set the compression parameters to include or omit the APPn markers 
        properly, so long as it is told the truth about the JPEG color space.
        For example, if you are writing some random 3-component color space 
        without conversion, don't try to fake out the library by setting 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.In_color_space</codeEntityReference>
        and <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space</codeEntityReference>
        to <codeEntityReference>F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_YCbCr</codeEntityReference>; 
        use <codeEntityReference>F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_UNKNOWN</codeEntityReference>. 
        You may want to write an APPn marker of your own devising to identify 
        the colorspace - see "<link xlink:href="81c88818-a5d7-4550-9ce5-024a768f7b1e">Special markers</link>".
        </para>
        
        <para>For decompression, the JPEG file's color space is given in 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space</codeEntityReference>,
        and this is transformed to the output color space 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_space</codeEntityReference>.
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)</codeEntityReference>'s 
        setting of <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space</codeEntityReference>
        can be relied on if the file conforms to JFIF or Adobe conventions, but 
        otherwise it is no better than a guess. If you know the JPEG file's 
        color space for certain, you can override 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)</codeEntityReference>'s 
        guess by setting <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space</codeEntityReference>. 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)</codeEntityReference>
        also selects a default output color space based on (its guess of) 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space</codeEntityReference>;
        set <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_space</codeEntityReference> 
        to override this. Again, you must select a supported transformation.
        </para>
        
        <para>The following transformations are currently supported:</para>
		<list class="bullet">
  			<listItem>YCbCr => GRAYSCALE</listItem>
  			<listItem>YCbCr => RGB</listItem>
  			<listItem>GRAYSCALE => RGB</listItem>
  			<listItem>YCCK => CMYK</listItem>
		</list>

        <para>as well as the null transforms. (Since GRAYSCALE => RGB is provided, 
        an application can force grayscale JPEGs to look like color JPEGs if it 
        only wants to handle one case.)
        </para>
        
        <para>The two-pass color quantizer is specialized to handle RGB data 
        (it weights distances appropriately for RGB colors). You'll need to modify 
        the code if you want to use it for non-RGB output color spaces.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>