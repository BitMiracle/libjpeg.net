<?xml version="1.0" encoding="utf-8"?>
<topic id="bda5b19b-88e0-44bf-97de-cd30fc61bb65" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="Main">
      <content>
        <para>Progressive JPEG rearranges the stored data into a series of scans 
        of increasing quality. In situations where a JPEG file is transmitted 
        across a slow communications link, a decoder can generate a low-quality 
        image very quickly from the first scan, then gradually improve the 
        displayed quality as more scans are received. The final image after all 
        scans are complete is identical to that of a regular (sequential) JPEG 
        file of the same quality setting. Progressive JPEG files are often 
        slightly smaller than equivalent sequential JPEG files, but the 
        possibility of incremental display is the main reason for using progressive JPEG.
        </para>
        
        <para>The IJG encoder library generates progressive JPEG files when given 
        a suitable "scan script" defining how to divide the data into scans. 
        Creation of progressive JPEG files is otherwise transparent to the encoder. 
        Progressive JPEG files can also be read transparently by the decoder library. 
        If the decoding application simply uses the library as defined above, 
        it will receive a final decoded image without any indication that the 
        file was progressive. Of course, this approach does not allow incremental 
        display. To perform incremental display, an application needs to use the 
        decoder library's <link xlink:href="6dba59c5-d32e-4dfc-87fe-f9eff7004146">buffered-image mode</link>, 
        in which it receives a decoded image multiple times.
        </para>
        
        <para>Each displayed scan requires about as much work to decode as a 
        full JPEG image of the same size, so the decoder must be fairly fast in 
        relation to the data transmission rate in order to make incremental 
        display useful. However, it is possible to skip displaying the image and 
        simply add the incoming bits to the decoder's coefficient buffer. 
        This is fast because only Huffman decoding need be done, not IDCT, 
        upsampling, colorspace conversion, etc. The IJG decoder library allows 
        the application to switch dynamically between displaying the image and 
        simply absorbing the incoming bits. A properly coded application can 
        automatically adapt the number of display passes to suit the time 
        available as the image is received. Also, a final higher-quality display 
        cycle can be performed from the buffered data after the end of the file 
        is reached.</para>
        
        <para><legacyBold>Progressive compression:</legacyBold></para>
        
        <para>To create a progressive JPEG file (or a multiple-scan sequential 
        JPEG file), call the <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_simple_progression</codeEntityReference>
        helper routine to create a recommended progression sequence. After that 
        the compression library will store DCT'd data into a buffer array as 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)</codeEntityReference>
        is called, and will emit all the requested scans during 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_finish_compress</codeEntityReference>. 
        This implies that multiple-scan output cannot be created with a suspending 
        data destination manager, since 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_finish_compress</codeEntityReference>
        does not support suspension. We should also note that the compressor 
        currently forces Huffman optimization mode when creating a progressive 
        JPEG file, because the default Huffman tables are unsuitable for progressive files.
        </para>
        
        <para><legacyBold>Progressive decompression:</legacyBold></para>
        
        <para>When <link xlink:href="6dba59c5-d32e-4dfc-87fe-f9eff7004146">buffered-image mode</link> 
        is not used, the decoder library will read all of a multi-scan file during 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress</codeEntityReference>, 
        so that it can provide a final decoded image. (Here "multi-scan" means 
        either progressive or multi-scan sequential.) This makes multi-scan files 
        transparent to the decoding application. However, existing applications 
        that used suspending input with version 5 of the IJG library will need 
        to be modified to check for a suspension return from 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress</codeEntityReference>.
        </para>
        
        <para>To perform incremental display, an application must use the library's 
        <link xlink:href="6dba59c5-d32e-4dfc-87fe-f9eff7004146">buffered-image mode</link>.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>