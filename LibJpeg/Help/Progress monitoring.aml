<?xml version="1.0" encoding="utf-8"?>
<topic id="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="Main">
      <content>
        <para>Some applications may need to regain control from the JPEG library 
        every so often. The typical use of this feature is to produce a percent-done 
        bar or other progress display. Although you do get control back frequently 
        during the data-transferring pass (the 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_scanlines(System.Byte[][],System.Int32)</codeEntityReference> 
        or <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)</codeEntityReference>
        loop), any additional passes will occur inside 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_finish_compress</codeEntityReference> 
        or <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress</codeEntityReference>;
        those routines may take a long time to execute, and you don't get control 
        back until they are done.
        </para>
        
        <para>You can define a progress-monitor routine which will be called 
        periodically by the library. No guarantees are made about how often this 
        call will occur, so we don't recommend you use it for mouse tracking or 
        anything like that. At present, a call will occur once per MCU row, 
        scanline, or sample row group, whichever unit is convenient for the current 
        processing mode; so the wider the image, the longer the time between calls. 
        During the data transferring pass, only one call occurs per call of 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_scanlines(System.Byte[][],System.Int32)</codeEntityReference>
        or <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)</codeEntityReference>, 
        so don't pass a large number of scanlines at once if you want fine resolution 
        in the progress count. (If you really need to use the callback mechanism 
        for time-critical tasks like mouse tracking, you could insert additional 
        calls inside some of the library's inner loops.)
        </para>
        
        <para>To establish a progress-monitor callback, create an object of 
        <codeEntityReference>T:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr</codeEntityReference>, 
        subscribe to its <codeEntityReference>E:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.OnProgress</codeEntityReference> 
        event and set cinfo.<codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Progress</codeEntityReference> 
        to this object. The callback will be called whenever cinfo.<codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Progress</codeEntityReference>
        is non-null. (This property is set to null initially; the library will 
        not change it thereafter) You can use the same callback routine for both 
        compression and decompression.
        </para>
        
        <para>The <codeEntityReference>T:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr</codeEntityReference> 
        class contains four properties which are set by the library:</para>
        
		<table>
  			<row>
    			<entry><codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_counter</codeEntityReference></entry>
    			<entry>Work units completed in this pass.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_limit</codeEntityReference></entry>
    			<entry>Total number of work units in this pass.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Completed_passes</codeEntityReference></entry>
    			<entry>Passes completed so far.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Total_passes</codeEntityReference></entry>
    			<entry>Total number of passes expected.</entry>
  			</row>
		</table>
        
        <para>During any one pass, <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_counter</codeEntityReference>
        increases from 0 up to (not including) 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_limit</codeEntityReference>; 
        the step size is usually but not necessarily 1. The 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_limit</codeEntityReference> 
        value may change from one pass to another. The expected total number of 
        passes is in <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Total_passes</codeEntityReference>, 
        and the number of passes already completed is in 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Completed_passes</codeEntityReference>.
        Thus the fraction of work completed may be estimated as
        </para>
        
        <para><mediaLink><image xlink:href="ProgressMonitoring" placement="center" /></mediaLink></para>
        
        <para>ignoring the fact that the passes may not be equal amounts of work.</para>
        
        <para>When decompressing, <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_limit</codeEntityReference>
        can even change within a pass, because it depends on the number of scans 
        in the JPEG file, which isn't always known in advance. The computed 
        fraction-of-work-done may jump suddenly (if the library discovers it has 
        overestimated the number of scans) or even decrease (in the opposite case). 
        It is not wise to put great faith in the work estimate.</para>
        
        <para>When using the decompressor's buffered-image mode, the progress 
        monitor work estimate is likely to be completely unhelpful, because the 
        library has no way to know how many output passes will be demanded of it. 
        Currently, the library sets 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Total_passes</codeEntityReference> 
        based on the assumption that there will be one more output pass if the 
        input file end hasn't yet been read 
        (<codeEntityReference qualifyHint="false" autoUpgrade="true">M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_input_complete</codeEntityReference>
        isn't true), but no more output passes if the file end has been reached 
        when the output pass is started. This means that 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Total_passes</codeEntityReference> 
        will rise as additional output passes are requested. If you have a way of 
        determining the input file size, estimating progress based on the fraction 
        of the file that's been read will probably be more useful than using the 
        library's value.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>