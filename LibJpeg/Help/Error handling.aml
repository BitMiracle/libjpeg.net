<?xml version="1.0" encoding="utf-8"?>
<topic id="41dc1a3b-0dea-4594-87d2-c213ab1049e1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="Main">
      <content>
        <para>When the default error handler is used, any error detected inside 
        the JPEG routines will cause a message to be printed on <legacyItalic>Console</legacyItalic>, 
        followed by throwing of exception. You can supply your own error handling 
        routines to override this behavior and to control the treatment of nonfatal 
        warnings and trace/debug messages.
        </para>
        
        <para>The JPEG library never writes any message directly; it always goes 
        through the error handling routines. Three classes of messages are recognized:</para>
		<list class="bullet">
  			<listItem>Fatal errors: the library cannot continue.</listItem>
  			<listItem>Warnings: the library can continue, but the data is corrupt, 
  			and a damaged output image is likely to result.</listItem>
  			<listItem>Trace/informational messages. These come with a trace level 
  			indicating the importance of the message; you can control the verbosity 
  			of the program by adjusting the maximum trace level that will be displayed.</listItem>
		</list>
        
        <para>All of the error handling routines will receive the JPEG object 
        (a <codeEntityReference>T:BitMiracle.LibJpeg.Classic.jpeg_common_struct</codeEntityReference> 
        which points to either a 
        <codeEntityReference>T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct</codeEntityReference>
        or a <codeEntityReference>T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct</codeEntityReference>). 
        This struct includes the error manager struct in its 
        <codeEntityReference>P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Err</codeEntityReference>
        property.
        </para>
        
        <para>The individual methods that you might wish to override are:</para>
		<table>
			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.error_exit</codeEntityReference></entry>
    			<entry>Receives control for a fatal error.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.output_message</codeEntityReference></entry>
    			<entry>Actual output of any JPEG message.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.format_message</codeEntityReference></entry>
    			<entry>Constructs a readable error message string.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)</codeEntityReference></entry>
    			<entry>Decide whether or not to emit a warning or trace message.</entry>
  			</row>
		</table>

        <para>Only <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.error_exit</codeEntityReference>
        and <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)</codeEntityReference>
        are called from the rest of the JPEG library; the other two are internal
        to the error handler.</para>
        
        <para>You can get the actual message texts using protected virtual method 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.GetMessageText(System.Int32)</codeEntityReference>. 
        It may be useful for an application to add its own message texts that are 
        handled by the same mechanism. You can override 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.GetMessageText(System.Int32)</codeEntityReference>
        for this purpose. If you number the addon messages beginning at 1000 or 
        so, you won't have to worry about conflicts with the library's built-in 
        messages. See the sample applications <legacyBold>cjpeg</legacyBold>/
        <legacyBold>djpeg</legacyBold> for an example of using addon messages 
        (class <legacyBold>BitMiracle.cdJpeg.cd_jpeg_error_mgr</legacyBold>)
        </para>
        
        <para>Actual invocation of the error handler is done via methods defined 
        in <codeEntityReference>T:BitMiracle.LibJpeg.Classic.jpeg_common_struct</codeEntityReference>:</para>
        
		<table>
			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.ERREXIT(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)</codeEntityReference></entry>
    			<entry>For fatal errors.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.WARNMS(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)</codeEntityReference></entry>
    			<entry>For corrupt-data warnings.</entry>
  			</row>
  			<row>
    			<entry><codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.TRACEMS(System.Int32,BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)</codeEntityReference></entry>
    			<entry>For trace and informational messages.</entry>
  			</row>
		</table>

        <para>These methods store the message code and any additional parameters 
        into the error manager, then invoke the 
        <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.error_exit</codeEntityReference>
        or <codeEntityReference>M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)</codeEntityReference>
        methods. The variants of each macro are for varying numbers of additional
        parameters. The additional parameters are inserted into the generated
        message using standard method <legacyItalic>string.Format</legacyItalic>.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>